[1mdiff --git a/src/fraction.js b/src/fraction.js[m
[1mindex c8e5b3a..61d016c 100644[m
[1m--- a/src/fraction.js[m
[1m+++ b/src/fraction.js[m
[36m@@ -15,12 +15,12 @@[m [mFraction = (function() {[m
 		}[m
 		return value;[m
 	};[m
[31m-	[m
[32m+[m
 	/**[m
[31m-	 * Initialize the Fraction, numerator and denominator [m
[32m+[m	[32m * Initialize the Fraction, numerator and denominator[m
 	 * @class Fraction[m
 	 * @constructor[m
[31m-	 * @param {Integer} numerator of the fraction [m
[32m+[m	[32m * @param {Integer} numerator of the fraction[m
 	 * @param {Integer} denominator the fraction must not be equal to 0[m
 	 */[m
 	var Fraction = function(numerator, denominator, noCheck) {[m
[36m@@ -41,7 +41,7 @@[m [mFraction = (function() {[m
 	};[m
 [m
 	/**[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @method value[m
 	 * @return {Number} the float number represented by the fraction[m
 	 */[m
[36m@@ -51,7 +51,7 @@[m [mFraction = (function() {[m
 [m
 	/**[m
 	 * clone the Fraction[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @method clone[m
 	 * @return {Fraction} Returns a clone of the fraction[m
 	 */[m
[36m@@ -61,7 +61,7 @@[m [mFraction = (function() {[m
 [m
 	/**[m
 	 * inverse the Fraction[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @method inverse[m
 	 * @return {Fraction} Returns the inverse of the fraction[m
 	 */[m
[36m@@ -70,7 +70,7 @@[m [mFraction = (function() {[m
 	};[m
 	/**[m
 	 * pretty-printer, converts fractions into whole numbers and fractions[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @method toString[m
 	 * @returns {String}[m
 	 */[m
[36m@@ -81,7 +81,7 @@[m [mFraction = (function() {[m
 [m
 	/**[m
 	 * pretty-printer to support TeX notation (using with MathJax, KaTeX, etc)[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @method toTeX[m
 	 * @returns {String}[m
 	 */[m
[36m@@ -117,7 +117,7 @@[m [mFraction = (function() {[m
 [m
 	/**[m
 	 * Adds the value of this fraction to another, returning the result in reduced form.[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @method add[m
 	 * @returns {Fraction}[m
 	 */[m
[36m@@ -134,7 +134,7 @@[m [mFraction = (function() {[m
 [m
 	/**[m
 	 * Subtracts the value of another fraction from the value of this one, returning the result in reduced form[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @method subtract[m
 	 * @returns {Fraction}[m
 	 */[m
[36m@@ -211,7 +211,7 @@[m [mFraction = (function() {[m
 	// Adapted from Ratio.js[m
 	/**[m
 	 * Takes two numbers and returns their greatest common factor[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @static[m
 	 * @method gcf[m
 	 * @returns {Number}[m
[36m@@ -232,7 +232,7 @@[m [mFraction = (function() {[m
 	};[m
 	/**[m
 	 * parse a string of the format a/b to a Fraction[m
[31m-	 * [m
[32m+[m	[32m *[m
 	 * @static[m
 	 * @method parse[m
 	 * @returns {Fraction}[m
[36m@@ -240,10 +240,16 @@[m [mFraction = (function() {[m
 	Fraction.parse = function(s) {[m
 		var split = s.split('/');[m
 		var n = parseInt(split[0].trim(), 10);[m
[31m-		if(split.length === 1){[m
[32m+[m		[32mif (isNan(n)) {[m
[32m+[m			[32mthrow "can't parse: " + s;[m
[32m+[m		[32m}[m
[32m+[m		[32mif (split.length === 1) {[m
 			return new Fraction(n, 1);[m
[31m-		}else{[m
[32m+[m		[32m} else {[m
 			var d = parseInt(split[1].trim(), 10);[m
[32m+[m			[32mif (isNan(n)) {[m
[32m+[m				[32mthrow "can't parse: " + s;[m
[32m+[m			[32m}[m
 			return new Fraction(n, d);[m
 		}[m
 	};[m
[36m@@ -266,4 +272,4 @@[m [mFraction = (function() {[m
 	Fraction.ONE = new Fraction(1, 1);[m
 [m
 	return Fraction;[m
[31m-})();[m
[32m+[m[32m})();[m
\ No newline at end of file[m
